---
description: 
globs: 
alwaysApply: true
---
## üåç Choix de la biblioth√®que d'internationalisation (i18n)

Plusieurs biblioth√®ques sont disponibles pour g√©rer la traduction dans React Native. Voici les plus populaires :([Moments Log][1])

1. **React-i18next** : Bas√©e sur i18next, elle offre une int√©gration fluide avec React Native, supporte le chargement asynchrone des traductions, la d√©tection automatique de la langue de l'appareil, et propose des fonctionnalit√©s avanc√©es comme la gestion des pluriels et l'interpolation. ([Intlayer][2])

2. **Intlayer** : Une biblioth√®que innovante qui permet de g√©rer les traductions au niveau des composants, avec un support TypeScript natif et une g√©n√©ration automatique des types. Elle est l√©g√®re et flexible, adapt√©e aux environnements React Native. ([Intlayer][3])

3. **LinguiJS** : Propose une approche moderne avec une extraction automatique des messages via CLI, une surcharge minimale √† l'ex√©cution, et une compatibilit√© TypeScript. Elle est adapt√©e aux projets n√©cessitant une gestion rigoureuse des traductions. ([Intlayer][2])

---

## üìÅ Organisation des fichiers de traduction

* **Structure des fichiers** : Cr√©ez un dossier `locales` contenant un fichier JSON par langue, par exemple :([stacklima.com][4])

  ```
  locales/
    en.json
    fr.json
    es.json
  ```

* **Cl√©s de traduction** : Utilisez des cl√©s descriptives et hi√©rarchis√©es pour faciliter la maintenance, par exemple :

  ```json
  {
    "home": {
      "welcome": "Bienvenue",
      "description": "Ceci est une application multilingue."
    }
  }
  ```

---

## ‚öôÔ∏è Configuration de la biblioth√®que i18n

Voici un exemple de configuration avec **React-i18next** :([Intlayer][5])

```javascript
// i18n.js
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import * as RNLocalize from 'react-native-localize';
import en from './locales/en.json';
import fr from './locales/fr.json';

const resources = {
  en: { translation: en },
  fr: { translation: fr },
};

const languageDetector = {
  type: 'languageDetector',
  async: true,
  detect: (callback) => {
    const locales = RNLocalize.getLocales();
    callback(locales[0]?.languageTag || 'en');
  },
  init: () => {},
  cacheUserLanguage: () => {},
};

i18n
  .use(languageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false,
    },
  });

export default i18n;
```

Dans votre composant principal (par exemple, `App.js`), importez simplement `i18n` pour initialiser la configuration.

---

## üõ†Ô∏è Meilleures pratiques

* **Utilisation de hooks** : Utilisez le hook `useTranslation` pour acc√©der aux fonctions de traduction dans vos composants.

  ```javascript
  import { useTranslation } from 'react-i18next';

  const MyComponent = () => {
    const { t } = useTranslation();
    return <Text>{t('home.welcome')}</Text>;
  };
  ```

* **Gestion des pluriels et de l'interpolation** : Profitez des fonctionnalit√©s avanc√©es pour g√©rer les pluriels et ins√©rer dynamiquement des variables dans vos traductions.

  ```json
  {
    "messages": "Vous avez {{count}} message",
    "messages_plural": "Vous avez {{count}} messages"
  }
  ```

* **Chargement asynchrone des traductions** : Pour les grandes applications, envisagez de charger les fichiers de traduction √† la demande pour r√©duire la taille initiale de l'application.([Intlayer][2])

* **Tests r√©guliers** : Testez votre application dans toutes les langues prises en charge pour vous assurer de la qualit√© des traductions et de l'adaptation de l'interface.

---

## üö´ √âl√©ments √† √©viter

* **Concat√©nation de cha√Ænes traduites** : √âvitez de construire des phrases en concat√©nant plusieurs traductions, car cela peut entra√Æner des incoh√©rences grammaticales dans certaines langues.

* **Hardcoding des textes** : Ne placez pas de textes directement dans vos composants. Utilisez toujours les fonctions de traduction pour garantir la coh√©rence et faciliter la maintenance.

* **Ignorer les sp√©cificit√©s culturelles** : Tenez compte des diff√©rences culturelles, notamment dans le formatage des dates, des nombres et des devises.([Intlayer][2])



