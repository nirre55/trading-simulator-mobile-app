---
description: 
globs: 
alwaysApply: true
---
## üß± Structure du Code & Clean Code

### ‚úÖ Bonnes Pratiques

* **Composants modulaires et r√©utilisables** : Cr√©ez des composants avec une responsabilit√© unique pour faciliter la maintenance et la r√©utilisation. ([w3r.one][1])

* **S√©paration des pr√©occupations** : S√©parez la logique m√©tier de la pr√©sentation en utilisant des composants conteneurs pour la logique et des composants de pr√©sentation pour l'interface utilisateur. ([centizen.com][2])

* **Utilisation de `React.memo` et `PureComponent`** : √âvitez les re-rendus inutiles en m√©morisant les composants fonctionnels avec `React.memo` ou en √©tendant `React.PureComponent` pour les composants de classe. ([w3r.one][3])

* **Hooks personnalis√©s** : Encapsulez la logique r√©utilisable dans des hooks personnalis√©s pour am√©liorer la lisibilit√© et la r√©utilisabilit√© du code.

### ‚ùå √Ä √âviter

* **Fonctions anonymes dans le rendu** : D√©finir des fonctions directement dans le rendu peut entra√Æner des re-rendus inutiles. Pr√©f√©rez d√©finir les fonctions en dehors du rendu et les passer en tant que r√©f√©rences. ([w3r.one][3])

* **Variables globales** : L'utilisation excessive de variables globales peut entra√Æner des conflits et des fuites de m√©moire. Limitez leur utilisation autant que possible. ([w3r.one][3])

---

## üöÄ Optimisations de Performance

### ‚úÖ Bonnes Pratiques

* **Utilisation de `FlatList` pour les longues listes** : `FlatList` offre un rendu performant pour les grandes listes en chargeant les √©l√©ments au fur et √† mesure. ([DEV Community][4])

* **Optimisation des images** : Utilisez des formats d'image adapt√©s (comme WebP), compressez les images et envisagez l'utilisation de biblioth√®ques comme `react-native-fast-image` pour un chargement efficace. ([Medium][5])

* **Chargement paresseux (lazy loading)** : Chargez les composants ou les modules uniquement lorsqu'ils sont n√©cessaires pour r√©duire le temps de chargement initial. ([DEV Community][4])

* **Utilisation du moteur JavaScript Hermes** : Hermes peut am√©liorer les performances en r√©duisant la taille de l'application et le temps de d√©marrage. ([w3r.one][3])

### ‚ùå √Ä √âviter

* **Appels `console.log` en production** : Les appels de d√©bogage peuvent affecter les performances et exposer des informations sensibles. Supprimez-les avant la mise en production.&#x20;

* **Calculs intensifs sur le thread principal** : Les op√©rations lourdes peuvent bloquer l'interface utilisateur. D√©placez-les vers des threads en arri√®re-plan ou utilisez des biblioth√®ques adapt√©es.&#x20;

---

## üß† Gestion de l'√âtat & Effets de Bord

### ‚úÖ Bonnes Pratiques

* **Gestion efficace de l'√©tat** : Utilisez des biblioth√®ques comme Redux ou MobX pour une gestion pr√©visible de l'√©tat global. Pour des besoins plus simples, le Context API peut suffire. ([w3r.one][1])

* **Nettoyage des effets** : Assurez-vous de nettoyer les √©couteurs d'√©v√©nements, les timers et les abonnements dans les hooks `useEffect` pour √©viter les fuites de m√©moire. ([w3r.one][3])

### ‚ùå √Ä √âviter

* **Mises √† jour d'√©tat fr√©quentes et non optimis√©es** : Les mises √† jour fr√©quentes de l'√©tat peuvent entra√Æner des re-rendus excessifs. Utilisez des techniques comme le regroupement des mises √† jour ou `useReducer` pour une gestion plus efficace. ([w3r.one][3])

---

## üß™ Tests & CI/CD

### ‚úÖ Bonnes Pratiques

* **Tests unitaires et d'int√©gration** : Utilisez des outils comme Jest pour les tests unitaires et React Testing Library pour les tests d'int√©gration afin de garantir la fiabilit√© de votre application. ([w3r.one][1])

* **Int√©gration et d√©ploiement continus (CI/CD)** : Mettez en place des pipelines CI/CD avec des outils comme GitHub Actions ou CircleCI pour automatiser les tests et les d√©ploiements. ([centizen.com][2])

### ‚ùå √Ä √âviter

* **Ignorer les tests** : Ne pas √©crire de tests peut entra√Æner des bugs non d√©tect√©s et des r√©gressions. Les tests sont essentiels pour maintenir la qualit√© du code. ([Affde][6])

---

## üõ°Ô∏è S√©curit√© & Bonnes Pratiques

### ‚úÖ Bonnes Pratiques

* **Chiffrement des donn√©es sensibles** : Utilisez des biblioth√®ques comme `react-native-encrypted-storage` pour stocker les donn√©es sensibles de mani√®re s√©curis√©e. ([centizen.com][2])

* **Validation des entr√©es utilisateur** : Validez et assainissez toutes les entr√©es utilisateur pour pr√©venir les vuln√©rabilit√©s telles que les injections SQL ou les scripts intersites (XSS). ([centizen.com][2])

* **Authentification s√©curis√©e** : Impl√©mentez des m√©thodes d'authentification robustes comme OAuth ou JWT et utilisez des biblioth√®ques fiables pour g√©rer l'authentification. ([centizen.com][2])

---

## üßº R√®gles de Clean Code

* **Linting et formatage** : Utilisez des outils comme ESLint avec des configurations standardis√©es (par exemple, Airbnb) pour maintenir une coh√©rence dans le code. ([centizen.com][2])

* **Revue de code** : Mettez en place des processus de revue de code pour d√©tecter les probl√®mes potentiels et partager les connaissances au sein de l'√©quipe. ([centizen.com][2])

* **Documentation** : Documentez votre code, les API, les composants et l'architecture globale pour faciliter la maintenance et l'onboarding des nouveaux d√©veloppeurs. ([centizen.com][2])



