---
description: 
globs: 
alwaysApply: false
---
## 🛠️ **1. Structure du Projet**

### ✅ À faire

* Utiliser une architecture modulaire claire :

  ```
  /src
    /components
    /screens
    /navigation
    /hooks
    /services
    /store
    /utils
    /types
  ```
* Regrouper les fichiers par fonctionnalité (feature-based folders).
* Placer les fichiers de types (`*.d.ts`, `types.ts`) dans `/types`.

### ❌ À éviter

* Mettre tous les fichiers dans un seul dossier `/src`.
* Nommer des composants ou fichiers avec des abréviations non explicites.

---

## 📦 **2. Utilisation de TypeScript**

### ✅ À faire

* Toujours typer les props des composants :

  ```ts
  interface Props {
    title: string;
    onPress: () => void;
  }
  ```
* Activer les options strictes dans `tsconfig.json` :

  ```json
  {
    "compilerOptions": {
      "strict": true,
      "noImplicitAny": true,
      "strictNullChecks": true
    }
  }
  ```
* Utiliser les types `React.FC<Props>` uniquement si vous utilisez `children`.

### ❌ À éviter

* Utiliser `any` ou `@ts-ignore`, sauf en dernier recours documenté.
* Utiliser des types primitifs dans des contextes complexes au lieu de types personnalisés.

---

## 🧱 **3. Composants**

### ✅ À faire

* Utiliser des composants fonctionnels avec hooks (`useState`, `useEffect`, etc.).
* Extraire les composants réutilisables dans `/components`.
* Favoriser des composants présentatifs (UI) découplés de la logique métier.

### ❌ À éviter

* Mettre de la logique métier dans les composants UI.
* Avoir des composants de plus de 200 lignes sans les découper.

---

## 🧭 **4. Navigation (React Navigation)**

### ✅ À faire

* Typage fort des paramètres de navigation :

  ```ts
  type RootStackParamList = {
    Home: undefined;
    Details: { id: string };
  };
  ```
* Centraliser la configuration de la navigation dans `/navigation`.

### ❌ À éviter

* Passer des paramètres non typés aux écrans.
* Dupliquer les configurations de navigation.

---

## 🪝 **5. Hooks**

### ✅ À faire

* Créer des hooks personnalisés pour encapsuler la logique métier :

  ```ts
  const useAuth = () => { ... };
  ```
* Préfixer les hooks par `use` et les placer dans `/hooks`.

### ❌ À éviter

* Appeler des hooks dans des conditions ou des boucles.
* Mettre trop de logique dans un seul hook personnalisé.

---

## 🧪 **6. Tests avec Jest**

### ✅ À faire

* Utiliser `@testing-library/react-native` pour tester les composants.
* Créer un dossier `__tests__` ou un fichier `MonComposant.test.tsx` à côté du composant.
* Tester les cas suivants :

  * Rendu visuel
  * Interaction utilisateur
  * Comportement conditionnel
* Mock les appels réseau ou les modules Expo via `jest.mock`.

### ❌ À éviter

* Tester l'implémentation au lieu du comportement (focus sur le "quoi" pas le "comment").
* Ne pas écrire de tests pour les composants critiques (auth, navigation, etc).

---

## ⚙️ **7. Expo & Native Modules**

### ✅ À faire

* Utiliser les APIs d'Expo avant de recourir à des modules natifs non managés.
* Utiliser `expo install` pour garantir les versions compatibles.

### ❌ À éviter

* Ajouter des packages natifs incompatibles avec Expo Managed Workflow sans eject.
* Modifier directement les fichiers Android/iOS en mode géré.

---

## 🎨 **8. Style et UI**

### ✅ À faire

* Utiliser `StyleSheet.create` ou `TailwindCSS` (ex: `nativewind`) pour un style clair et modulaire.
* Favoriser un design responsive avec `Dimensions`, `useWindowDimensions`, ou `react-native-responsive-screen`.

### ❌ À éviter

* Hardcoder les tailles (utiliser `%`, `vh`, etc.).
* Mettre le style inline de façon excessive.

---

## 📄 **9. Documentation et Conventions**

### ✅ À faire

* Ajouter un README complet avec :

  * Configuration
  * Démarrage
  * Structure du projet
  * Scripts utiles
* Suivre une convention de nommage :

  * Composants : `PascalCase`
  * Fichiers utilitaires : `camelCase`
  * Constantes : `SCREAMING_SNAKE_CASE`

